<?php
// Copyright 2015 MyOddWeb.com.
// All Rights Reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of MyOddWeb.com nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: Florent Guelfucci

namespace MyOddWeb;

require_once 'bignumber.php';

final class BigNumberConstants
{
  // zero.
  protected static $_zero = null;

  // one.
  protected static $_one = null;

  // two
  protected static $_two = null;

  // pi
  protected static $_pi = null;

  // e
  protected static $_e = null;

  /**
   * Private constructor
   */
  private function __construct()
  {
  }

  /**
   * Private clone method
   */
  private function __clone()
  {
  }

  /**
   * Padd the precision to prevent rounding errors
   * @param number $precision
   * @return number the padded precision.
   */
  public static function PrecisionPadding($precision)
  {
    return ($precision+5);
  }

  /**
   * Number zero
   * @return BigNumber the zero constant.
   */
  public static function Zero()
  {
    if( null == self::$_zero )
    {
      self::$_zero = new BigNumber( [0], 0, false );
    }
    return self::$_zero;
  }

  /**
   * Number one
   * @return BigNumber the one constant.
   */
  public static function One()
  {
    if( null == self::$_one )
    {
      self::$_one = new BigNumber( [1], 0, false );
    }
    return self::$_one;
  }

  /**
   * Number two
   * @return BigNumber the two constant.
   */
  public static function Two()
  {
    if( null == self::$_two )
    {
      self::$_two = new BigNumber( [2], 0, false );
    }
    return self::$_two;
  }

  /**
   * @see https://en.wikipedia.org/wiki/E_%28mathematical_constant%29
   * @see http://www.miniwebtool.com/first-n-digits-of-pi/?number=1000
   * @return BigNumber e
   */
  public static function e()
  {
    //  did we calculate e already?
    if( null == self::$_e )
    {
      // create it now using {}, it is slightly faster than using the string parsing, (just a little).
      self::$_e = new BigNumber([4,5,3,0,5,3,0,7,5,9,8,8,6,4,5,1,7,6,2,1,2,5,5,6,9,6,9,3,7,8,6,0,1,6,8,9,8,1,7,1,4,0,7,7,4,7,5,1,1,0,1,5,0,5,7,3,8,3,0,1,5,8,0,2,7,0,1,3,0,3,1,6,0,9,4,5,3,6,5,4,1,7,2,9,5,0,4,1,8,7,3,4,2,4,6,9,3,8,6,7,6,1,0,7,0,7,8,8,8,0,9,6,3,8,1,6,9,0,2,5,1,3,5,2,6,4,5,0,4,6,3,4,1,8,3,7,1,3,4,3,9,0,4,1,3,6,4,1,9,4,8,1,4,9,9,6,3,4,0,3,5,3,2,0,9,9,0,6,1,2,0,0,9,0,2,3,2,6,8,7,9,1,4,0,7,2,8,4,2,6,3,3,2,0,6,5,7,8,4,8,6,9,4,4,2,3,6,4,3,6,3,4,4,4,8,9,1,4,8,4,0,1,6,9,7,2,9,4,7,5,2,8,5,0,8,6,8,0,2,9,8,9,9,4,8,2,2,9,7,8,2,2,4,9,8,5,8,3,7,6,6,8,3,7,2,7,0,8,5,4,3,9,1,5,8,8,8,8,9,5,1,5,3,0,9,6,1,4,0,3,9,5,1,8,8,1,8,1,6,9,9,0,5,2,1,1,8,9,6,0,2,3,3,1,6,3,7,1,7,6,5,7,1,0,3,5,1,8,5,5,4,9,1,8,9,0,5,2,8,7,8,2,3,2,0,8,1,1,3,5,9,2,4,0,8,4,6,4,6,7,3,2,8,2,3,8,6,0,2,3,9,7,6,7,3,8,9,1,0,7,9,3,0,4,1,6,1,4,8,6,0,7,9,1,8,3,2,1,0,3,7,1,1,3,4,4,9,0,5,2,6,3,0,2,3,3,9,7,8,8,4,9,2,8,9,3,2,9,3,9,0,2,8,5,0,1,5,6,4,6,9,4,8,9,3,9,6,8,8,2,5,2,8,1,3,3,0,8,6,6,3,9,1,5,9,8,9,6,2,8,0,2,2,8,4,1,5,3,6,7,5,9,2,2,9,9,9,4,2,4,5,1,2,8,7,1,6,3,7,7,2,1,3,9,7,8,9,0,0,3,2,9,8,8,6,3,6,1,3,9,7,8,9,5,0,9,4,5,4,4,6,8,6,4,9,7,6,9,9,6,9,9,4,4,5,8,7,0,7,7,6,9,6,3,5,9,6,5,0,5,2,4,4,8,7,9,8,3,2,5,2,1,1,1,2,7,7,3,6,4,7,5,6,8,0,1,5,1,5,5,2,0,9,1,8,6,3,8,2,9,6,1,4,1,0,1,3,9,0,2,7,7,9,6,9,6,0,3,2,7,4,0,7,4,7,3,4,4,7,2,1,9,0,7,8,2,3,9,0,7,0,0,2,3,1,1,7,3,7,6,0,6,7,9,2,0,6,5,6,2,8,3,3,9,4,4,0,2,5,7,0,0,0,3,8,5,4,8,3,1,3,3,1,6,2,6,0,6,8,3,8,1,6,7,2,0,7,1,5,5,9,6,0,2,9,9,4,4,7,7,7,0,9,3,5,7,0,1,7,3,4,2,4,4,5,4,3,2,4,7,3,5,8,1,1,4,7,7,4,8,6,1,0,0,8,4,6,2,2,8,0,8,6,6,0,6,4,1,6,7,4,4,2,9,0,5,7,6,1,4,8,8,4,3,9,9,4,1,9,8,0,4,5,1,2,0,7,0,3,9,7,8,1,4,3,8,3,7,5,1,1,0,9,1,0,1,5,2,5,9,1,3,5,7,0,8,8,9,2,8,3,3,2,3,6,7,0,9,4,3,4,9,7,2,6,8,2,3,2,3,1,8,3,7,0,3,6,5,9,5,0,6,2,5,9,2,4,3,3,0,0,9,2,7,5,3,4,0,9,2,6,6,9,5,3,1,4,7,1,8,1,2,9,9,5,0,3,0,0,2,3,9,1,9,3,6,6,4,7,2,4,7,2,4,6,6,1,5,2,5,8,7,1,2,8,3,1,7,5,4,9,5,7,4,5,3,5,3,0,3,6,6,7,0,4,2,7,7,2,6,7,6,9,6,6,9,4,7,5,9,5,9,9,9,6,3,9,0,7,4,2,7,5,7,7,9,4,2,6,6,2,5,3,1,7,4,7,8,2,0,6,3,5,3,2,5,4,0,9,5,4,8,2,8,1,8,2,8,1,7,2], 1000, false);
      // _e = BigNumber("2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354");
    }

    // return it
    return self::$_e;
  }

  /**
   * The const value of pi to 1000 numbers
   * @see https://en.wikipedia.org/wiki/E_%28mathematical_constant%29
   * @see http://www.wolframalpha.com/input/?i=pi+to+1000+digits
   * @return BigNumber pi
   */
  public static function pi()
  {
    //  did we calculate e already?
    if( null == self::$_pi )
    {
      // create it now using {}, it is slightly faster than using the string parsing, (just a little).
      // uncomment the code below if that causes an error.
      self::$_pi = new BigNumber([9,8,9,1,0,2,4,6,1,2,9,0,9,5,9,1,1,1,6,6,7,8,7,2,9,1,0,0,3,1,6,6,0,8,6,2,2,1,7,1,2,3,5,0,8,7,7,5,8,1,8,7,7,5,9,1,5,7,3,9,5,7,8,7,3,5,3,2,8,8,3,6,8,2,6,5,9,5,1,1,3,7,8,6,4,5,5,7,8,2,4,0,9,4,3,5,2,8,9,5,3,0,3,7,4,1,9,6,6,7,7,1,7,1,6,0,2,4,1,8,3,8,0,2,3,3,5,7,8,5,6,8,8,2,5,7,8,3,8,7,3,1,3,0,0,0,1,0,1,7,1,8,8,1,1,3,9,1,6,2,5,3,0,5,8,6,4,4,3,3,5,2,8,0,3,2,2,5,2,4,6,2,0,3,8,0,9,6,4,3,5,5,4,9,5,4,4,2,0,5,9,5,8,1,3,6,9,0,6,1,8,2,3,7,1,3,7,9,5,0,1,5,9,9,4,0,8,7,9,2,7,3,8,9,9,9,9,9,9,4,3,1,1,2,7,0,7,8,1,5,0,6,9,9,0,3,1,7,7,4,7,7,9,2,6,3,1,8,9,5,1,8,1,4,4,3,0,4,6,8,0,6,9,1,2,0,9,2,1,2,1,1,6,5,9,9,1,0,2,4,5,3,2,9,8,5,2,9,8,6,9,7,2,2,9,7,0,5,0,1,7,3,5,8,5,9,4,5,6,4,1,0,3,4,3,5,9,4,2,2,1,0,9,0,4,4,8,6,4,1,2,7,8,7,1,7,3,6,3,7,1,9,0,6,9,8,7,7,5,7,2,4,3,1,7,7,5,8,7,7,2,8,0,6,5,3,6,2,5,4,1,7,2,1,8,6,5,0,0,0,2,3,1,5,0,4,9,6,6,7,6,4,8,1,8,4,7,6,4,8,3,2,5,7,6,7,1,3,9,2,6,7,1,7,1,2,9,3,5,0,7,7,2,0,7,3,4,9,0,6,8,9,7,1,2,0,7,0,9,1,7,3,7,4,2,2,5,9,3,6,4,9,4,9,3,1,2,0,6,8,0,3,4,6,6,5,6,0,4,4,2,6,3,3,7,6,3,3,8,9,2,1,9,4,9,1,1,0,3,8,1,8,3,9,7,2,2,1,9,8,4,2,7,2,5,7,5,8,8,1,5,3,7,6,5,9,4,7,2,6,9,9,7,3,2,6,4,4,7,0,8,4,5,8,1,1,5,0,1,3,9,7,1,1,6,2,3,9,1,8,3,7,1,1,6,8,1,2,9,0,3,5,9,1,9,5,9,5,7,5,6,3,0,7,2,7,5,0,3,3,4,9,0,6,1,1,5,1,4,9,1,5,9,6,4,1,4,8,3,1,2,5,6,6,4,0,2,8,8,4,5,0,3,5,0,3,3,1,1,0,0,6,3,0,9,5,2,9,8,7,6,3,4,6,3,5,1,7,1,9,0,4,5,2,9,2,8,2,6,9,0,2,9,0,2,5,1,8,8,4,7,1,8,8,5,5,1,3,6,0,6,6,0,0,7,8,5,4,2,7,3,7,2,1,4,1,9,4,2,0,6,2,7,0,6,3,9,3,3,1,2,8,4,6,6,2,3,4,5,4,0,1,6,8,4,3,0,6,4,3,2,9,6,6,5,8,4,6,5,4,1,9,0,9,1,0,2,1,7,2,5,6,1,3,8,7,6,8,7,3,3,2,8,4,6,5,7,4,8,2,1,6,4,4,3,3,9,5,6,6,5,7,9,0,1,8,8,2,4,4,6,9,1,8,3,0,3,9,4,5,9,8,4,9,2,2,6,4,4,6,9,5,5,5,0,1,1,2,5,8,3,9,1,0,7,2,0,1,4,8,2,0,5,4,7,1,1,1,8,4,8,2,1,8,0,4,9,5,3,5,2,7,1,3,2,2,8,5,0,5,5,9,0,6,4,4,8,3,9,0,7,4,6,6,0,3,2,8,2,3,1,5,6,8,0,8,4,1,2,8,9,7,6,0,7,1,1,2,4,3,5,2,8,4,3,0,8,2,6,8,9,9,8,0,2,6,8,2,6,0,4,6,1,8,7,0,3,2,9,5,4,4,9,4,7,9,0,2,8,5,0,1,5,7,3,9,9,3,9,6,1,7,9,1,4,8,8,2,0,5,9,7,2,3,8,3,3,4,6,2,6,4,8,3,2,3,9,7,9,8,5,3,5,6,2,9,5,1,4,1,3], 1000, false);
      // _pi = BigNumber("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989");
    }

    // return it
    return self::$_pi;
  }
}
?>